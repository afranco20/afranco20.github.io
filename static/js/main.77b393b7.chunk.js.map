{"version":3,"sources":["Components/About.js","Components/Intro.js","Components/Parallax.js","Components/Skills.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["About","Box","className","Typography","style","paddingBottom","variant","Container","id","maxWidth","component","this","content","React","Component","Intro","color","Background","particles","Particles","init","selector","speed","connectParticles","maxParticles","responsive","breakpoint","options","state","destroy","bg","background","position","height","width","zIndex","Skills","Paper","App","library","add","faJava","Parallax","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","light","dark","contrastText","text","secondary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SA2BeA,E,kLAtBX,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CAAYC,MAAO,CAACC,cAAe,QAASC,QAAQ,MAApD,mBAGA,kBAACH,EAAA,EAAD,CAAYG,QAAQ,MAApB,uI,+BASJ,OACE,kBAACC,EAAA,EAAD,CAAWC,GAAG,QAAQC,SAAS,KAAKC,UAAU,WAC3CC,KAAKC,e,GAlBMC,IAAMC,WCoBXC,E,kLAlBX,OACE,kBAACR,EAAA,EAAD,CAAWL,UAAU,UACnB,kBAACC,EAAA,EAAD,CAAYa,MAAM,gBAAgBV,QAAQ,MAA1C,kB,+BAQJ,OACI,kBAACC,EAAA,EAAD,CAAWC,GAAG,SAASE,UAAU,WAC9BC,KAAKC,e,GAdIC,IAAMC,W,iBC8CXG,E,4LA5CXN,KAAKO,UAAYC,IAAUC,KAAK,CAC9BC,SAAU,cACVC,MAAO,GACPC,kBAAkB,EAClBP,MAAO,UAEPQ,aAAc,IACdC,WAAY,CAAC,CACXC,WAAY,KACZC,QAAS,CACPJ,kBAAkB,S,6CAOxBZ,KAAKiB,MAAMV,UAAUW,Y,+BAIrB,IAQMC,EAAK,CACTC,WAAW,mBAAD,OATC,oCASD,aARC,wBAQD,aAPC,yBAOD,KACVC,SAAU,QAEVC,OAAQ,QACRC,MAAO,QACPC,OAAQ,MAGV,OACE,4BAAQ/B,MAAO0B,EAAI5B,UAAU,mB,GAzCVW,IAAMC,W,QCqBhBsB,E,kLAnBX,OACE,kBAACC,EAAA,EAAD,CAAOnC,UAAU,UACf,kBAACC,EAAA,EAAD,CAAYG,QAAQ,MAApB,a,+BASJ,OACE,kBAACC,EAAA,EAAD,CAAWC,GAAG,SAASC,SAAS,KAAKC,UAAU,WAC5CC,KAAKC,e,GAfOC,IAAMC,W,gBC6BZwB,MAhBf,WAGE,OAFAC,IAAQC,IAAIC,KAGV,yBAAKvC,UAAU,OACb,kBAACwC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAACzC,EAAA,EAAD,CAAKG,MAAO,CAAC2B,WAAY,YACvB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCdYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCDSC,EAfDC,YAAgB,CAC5BC,QAAS,CACPC,QAAS,CACPC,KAAM,UACNC,MAAO,UACPC,KAAM,UACNC,aAAc,WAEhBC,KAAM,CACJL,QAAS,UACTM,UAAW,cCDjBC,IAASC,OACP,kBAACC,EAAA,EAAD,CAAeZ,MAAOA,GACpB,kBAACa,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77b393b7.chunk.js","sourcesContent":["import React from 'react';\nimport {Box, Typography, Paper, Container} from '@material-ui/core/'\n\nclass About extends React.Component {\n  content() {\n    return(\n      <Box className=\"About\">\n        <Typography style={{paddingBottom: \"24px\"}} variant=\"h2\">\n          I'm Alex Franco\n        </Typography>\n        <Typography variant=\"h5\">\n          I'm a junior software engineer. I'm currently a senior at the\n          University of Central Florida where I'm studying computer science.\n        </Typography>\n      </Box>\n    );\n  }\n\n  render() {\n    return(\n      <Container id=\"About\" maxWidth=\"md\" component=\"section\">\n        {this.content()}\n      </Container>\n    );\n  }\n}\n\nexport default About;\n","import React from 'react';\nimport {Box, Container, Typography} from '@material-ui/core/';\n\nclass Intro extends React.Component {\n  content() {\n    return(\n      <Container className=\"Header\">\n        <Typography color=\"textSecondary\" variant=\"h1\">\n          Hello World\n        </Typography>\n      </Container>\n    );\n  }\n\n  render() {\n    return(\n        <Container id=\"Header\" component=\"section\">\n          {this.content()}\n        </Container>\n    );\n  }\n}\n\nexport default Intro;\n","import Particles from 'particlesjs';\nimport React from 'react'\n\nclass Background extends React.Component {\n  componentDidMount() {\n    this.particles = Particles.init({\n      selector: '.background',\n      speed: .50,\n      connectParticles: true,\n      color: '#FFFFFF',\n      // color: [\"#7832ff\", \"#3296fa\"],\n      maxParticles: 200,\n      responsive: [{\n        breakpoint: 1280,\n        options: {\n          connectParticles: false,\n        }\n      }]\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.particles.destroy();\n  }\n\n  render() {\n    const arg1 = \"circle farthest-corner at 10% 20%\"\n    const arg2 = \"rgba(120,50,255,1) 0%\"\n    const arg3 = \"rgba(50,150,250,1) 91%\"\n\n    // const arg1 = \"circle farthest-corner at 10% 20%\"\n    // const arg2 = \"#212121 0%\"\n    // const arg3 = \"#333333 91%\"\n\n    const bg = {\n      background: `radial-gradient(${arg1}, ${arg2}, ${arg3})`,\n      position: 'fixed',\n      // display: 'block',\n      height: '100vh',\n      width: '100vw',\n      zIndex: '-1',\n    };\n\n    return(\n      <canvas style={bg} className='background'></canvas>\n    );\n  }\n}\n\nexport default Background;\n","import React from 'react'\nimport {Box, Typography, Paper, Container} from '@material-ui/core'\n\nclass Skills extends React.Component {\n  content() {\n    return (\n      <Paper className=\"Skills\">\n        <Typography variant=\"h4\">\n          Skills\n        </Typography>\n\n      </Paper>\n    );\n  }\n\n  render() {\n    return (\n      <Container id=\"Skills\" maxWidth=\"md\" component=\"section\">\n        {this.content()}\n      </Container>\n    );\n  }\n}\n\nexport default Skills;\n","import React from 'react';\nimport './App.css';\n\n// custom components\nimport About from './Components/About';\nimport Intro from './Components/Intro';\nimport Parallax from './Components/Parallax';\nimport Skills from './Components/Skills';\n\n// material ui\nimport { Divider, Box } from '@material-ui/core';\n\n// font awesome\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faJava } from '@fortawesome/free-brands-svg-icons'\n\nfunction App() {\n  library.add(faJava);\n\n  return (\n    <div className=\"App\">\n      <Parallax />\n      <Intro />\n\n      <Box style={{background: '#e1e2e1'}}>\n        <About />\n        <Skills/>\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme ({\n  palette: {\n    primary: {\n      main: '#007bff',\n      light: '#69a9ff',\n      dark: '#0050cb',\n      contrastText: '#ffffff'\n    },\n    text: {\n      primary: \"#616161\",\n      secondary: \"#FFFFFF\",\n    }\n  }\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport theme from './theme';\n\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}